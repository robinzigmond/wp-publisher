import datetime

from PyQt5.QtCore import *
from PyQt5.QtWidgets import (QMainWindow, QFileDialog, QMessageBox)


import generated
import publish
import wordpress
import workers


class Fields():
    def __init__(self):
        self.publish_variables = None
        self.installation_variables = None

    def valid(self, field_section, field_variables):
        self.installation_variables = field_variables

        if field_section == 'installation':
            if self.installation_variables['path'] == '':
                message = 'Installation path is empty'
                result = False
            elif self.installation_variables['site_url'] == '':
                message = 'Site Url is empty'
                result = False
            elif self.installation_variables['database']['hostname'] == '':
                message = 'Database hostname is empty'
                result = False
            else:
                message = 'Installation fields validated, starting...'
                result = True
        elif field_section == 'publish':
            self.publish_variables = field_variables

            if self.publish_variables['cloud_service'] == '':
                message = 'Installation path is empty'
                result = False
            elif self.publish_variables['site_url'] == '':
                message = 'URL is empty'
                result = False
            elif self.publish_variables['api_key'] == '':
                message = 'Api key is empty'
                result = False
            elif self.publish_variables['cloud_service'] == '':
                message = 'Cloud service is empty'
                result = False
            else:
                message = 'Publication fields validated, starting...'
                result = True

        return result, message

'''
The qt gui class is generated by pyuic5
Due to it being a generated class, it is not edited directly.
Instead, this class wraps around it.
'''

class App(QMainWindow):
    def __init__(self, *args, **kwargs):
        super(App, self).__init__(*args, **kwargs)
        self.init_ui()
        self.publish_variables = {}
        self.installation_variables = {}

        self.threadpool = QThreadPool()
        print("Multithreading with maximum %d threads" % self.threadpool.maxThreadCount())

    def get_installation_variables(self):
        database_variables = {
            'hostname': self.ui.installation_database_hostname_text.text(),
            'username': self.ui.installation_database_username_text.text(),
            'password': self.ui.installation_database_password_text.text()
        }

        self.installation_variables = {
            'path': self.ui.installation_path_text.text(),
            'site_url': self.ui.installation_site_url_text.text(),
            'username': self.ui.installation_username_text.text(),
            #'wordmove_config': self.ui.wordmove_checkbox.isChecked(),
            'database': database_variables
        }

    def get_publish_variables(self):
        self.publish_variables = {
            'cloud_service': 'Digital Ocean',
            'api_key': self.ui.publish_api_key_text.text(),
            'installation_path': self.ui.publish_installation_path_text.text(),
            'site_url': self.ui.publish_site_url_text.text()
        }

    def status_bar_message(self, message):
        timestamp_format = '[%H:%M:%S]'
        timestamp = datetime.datetime.now().strftime(timestamp_format)

        timestamped_message = str(timestamp) + ' ' + message
        self.statusBar().showMessage(timestamped_message)
        self.show()

    def set_installation_path(self):
        dialogue_title = 'Select the folder where you would like to install wordpress'
        folder_name = QFileDialog.getExistingDirectory(self, dialogue_title)
        installation_path = self.ui.installation_path_text
        installation_path.setText(folder_name)

    def set_publish_path(self):
        dialogue_title = 'Select the wordpress installation you would like to publish'
        folder_name = QFileDialog.getExistingDirectory(self, dialogue_title)
        publish_path = self.ui.publish_installation_path_text
        publish_path.setText(folder_name)

    def print_output(self, s):
        print(s)

    def thread_complete(self):
        print("Finished Thread")

    def progress_fn(self, log):
        self.status_bar_message(log)
        self.ui.logs_output_text_box.insertPlainText(log + '\n')

    def start_install(self, progress_callback):
        fields = Fields()
        self.get_installation_variables()
        valid, error_message = fields.valid('installation', self.installation_variables)

        if valid:
            progress_callback.emit('Starting Install')
            installation = wordpress.Wordpress(self.installation_variables)
            installation.start()
            progress_callback.emit('Finished installation')
        else:
            progress_callback.emit(error_message)

    '''
    Check all the fields and other details are there before beginning
    '''
    def start_publish(self, progress_callback):
        fields = Fields()
        self.get_publish_variables()
        valid, error_message = fields.valid('publish', self.publish_variables)

        if valid:
            progress_callback.emit('Publish Fields Validated')
            # Create a new server
            progress_callback.emit('Checking service type')
            if self.publish_variables['cloud_service'] == 'Digital Ocean':
                progress_callback.emit('Using service: ' + self.publish_variables['cloud_service'])
                vps = publish.ServerInit(self.publish_variables)
                username, password = vps.run()

            '''
            Connect to server and perform all necessary configuration
            '''
            progress_callback.emit('Starting configuration')
            vps_configuration = publish.Configuration(username, password, vps, self.publish_variables)
            vps_configuration.run()

            progress_callback.emit('Spun up server. Details are:')
            progress_callback.emit('ipv4 address:' + vps_configuration.ipv4_address)
            progress_callback.emit('username: ' + username)
            progress_callback.emit('password: ' + password)
            progress_callback.emit('Finished Configuration')
            progress_callback.emit('Uploading files')
        else:
            progress_callback.emit(error_message)

    # TODO the functions below do pretty much the same. Merge into generic
    def publish_trigger(self):
        publication_worker = workers.Worker(self.start_publish)
        publication_worker.signals.finished.connect(self.thread_complete)
        publication_worker.signals.result.connect(self.print_output)
        publication_worker.signals.progress.connect(self.progress_fn)

        self.threadpool.start(publication_worker)

    def install_trigger(self):
        installation_worker = workers.Worker(self.start_install)
        installation_worker.signals.finished.connect(self.thread_complete)
        installation_worker.signals.result.connect(self.print_output)
        installation_worker.signals.progress.connect(self.progress_fn)

        self.threadpool.start(installation_worker)

    def about_dialog(self):
        msg = QMessageBox()

        msg.setWindowTitle("About")
        msg.setText("Author: rs@mage.me.uk\n"
                    "Build: 36 (Alpha)")
        msg.setInformativeText("Let me know if you have any questions. All patches, bug reports and suggestions are most welcome")
        msg.exec_()

    def init_ui(self):
        self.ui = generated.Ui_MainWindow()
        self.ui.setupUi(self)

        # File path selectors
        installation_path_selector = self.ui.installation_path_file_selector
        installation_path_selector.clicked.connect(self.set_installation_path)

        publish_path_selector = self.ui.publish_installation_path_selector
        publish_path_selector.clicked.connect(self.set_publish_path)

        # Start buttons
        installation_start_button = self.ui.installation_start_button
        installation_start_button.clicked.connect(self.install_trigger)

        publish_start_button = self.ui.publish_start_button
        publish_start_button.clicked.connect(self.publish_trigger)

        # About and additional settings buttons
        about_button = self.ui.about_button
        about_button.clicked.connect(self.about_dialog)

        self.show()
